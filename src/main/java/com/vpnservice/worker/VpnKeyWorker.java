package com.vpnservice.worker;

import com.vpnservice.config.RabbitMQConfig;
import com.vpnservice.messaging.VpnKeyGenerationRequest;
import com.vpnservice.model.User;
import com.vpnservice.model.VPNKey;
import com.vpnservice.repository.UserRepository;
import com.vpnservice.repository.VPNKeyRepository;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

@Component
public class VpnKeyWorker {

    private final UserRepository userRepository;
    private final VPNKeyRepository vpnKeyRepository;
    private final JavaMailSender mailSender;

    public VpnKeyWorker(UserRepository userRepository,
                        VPNKeyRepository vpnKeyRepository,
                        JavaMailSender mailSender) {
        this.userRepository = userRepository;
        this.vpnKeyRepository = vpnKeyRepository;
        this.mailSender = mailSender;
    }

    @RabbitListener(queues = RabbitMQConfig.VPN_QUEUE)
    public void handleVpnKeyRequest(VpnKeyGenerationRequest request) {
        try {
            Thread.sleep(3000); // –ø–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("üî• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VPN –∫–ª—é—á–∞ –¥–ª—è: " + request.getEmail());

        Optional<User> userOpt = userRepository.findById(request.getUserId());
        if (userOpt.isEmpty()) {
            throw new IllegalStateException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + request.getUserId());
        }

        User user = userOpt.get();

        String config = generateWireGuardConfig(user);

        VPNKey key = new VPNKey();
        key.setUser(user);
        key.setKeyData(config);
        key.setCreatedAt(LocalDateTime.now());
        sendEmail(user.getEmail(), "–í–∞—à VPN-–∫–æ–Ω—Ñ–∏–≥ –≥–æ—Ç–æ–≤!", config);

        System.out.println("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: " + user.getEmail());
        vpnKeyRepository.save(key);
        saveConfigToFile(config, user.getEmail());
    }

    private String generateWireGuardConfig(User user) {
        // üß™ –ü–æ–∫–∞ —á—Ç–æ –º–æ–∫, –ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ shell –∫–æ–º–∞–Ω–¥—É
        String privateKey = "MOCKED_PRIVATE_KEY_" + UUID.randomUUID();
        String publicKey = "SERVER_PUBLIC_KEY";
        String clientIp = "10.0.0." + (int) (Math.random() * 100 + 2);

        return """
                [Interface]
                PrivateKey = %s
                Address = %s/32
                DNS = 1.1.1.1

                [Peer]
                PublicKey = %s
                Endpoint = vpn.example.com:51820
                AllowedIPs = 0.0.0.0/0
                PersistentKeepalive = 25
                """.formatted(privateKey, clientIp, publicKey);
    }

    private void sendEmail(String to, String subject, String text) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(to);
        message.setSubject(subject);
        message.setText(text);
        mailSender.send(message);
    }

    private void saveConfigToFile(String configData, String username) {
        Path directoryPath = Path.of("configs");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
        try {
            if (!Files.exists(directoryPath)) {
                Files.createDirectories(directoryPath);
            }

            // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Path filePath = directoryPath.resolve(username + "_vpn_config.conf");

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª
            Files.writeString(filePath, configData);
            System.out.println("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: " + filePath);
        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª.");
        }
    }
}
